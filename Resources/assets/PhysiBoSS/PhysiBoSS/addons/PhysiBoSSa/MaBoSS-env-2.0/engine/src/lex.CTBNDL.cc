
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define CTBNDLconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define CTBNDLnoreturn __attribute__((__noreturn__))
#else
#define CTBNDLnoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (CTBNDL_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((CTBNDL_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE CTBNDLrestart( CTBNDLin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(CTBNDL_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct CTBNDL_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t CTBNDL_size_t;
#endif

extern int CTBNDLleng;

extern FILE *CTBNDLin, *CTBNDLout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define CTBNDLless(n) \
	do \
		{ \
		/* Undo effects of setting up CTBNDLtext. */ \
        int CTBNDLless_macro_arg = (n); \
        YY_LESS_LINENO(CTBNDLless_macro_arg);\
		*CTBNDL_cp = (CTBNDL_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(CTBNDL_c_buf_p) = CTBNDL_cp = CTBNDL_bp + CTBNDLless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up CTBNDLtext again */ \
		} \
	while ( 0 )
#define unput(c) CTBNDLunput( c, (CTBNDLtext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct CTBNDL_buffer_state
	{
	FILE *CTBNDL_input_file;

	char *CTBNDL_ch_buf;		/* input buffer */
	char *CTBNDL_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int CTBNDL_buf_size;

	/* Number of characters read into CTBNDL_ch_buf, not including EOB
	 * characters.
	 */
	int CTBNDL_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int CTBNDL_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int CTBNDL_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int CTBNDL_at_bol;

    int CTBNDL_bs_lineno; /**< The line count. */
    int CTBNDL_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int CTBNDL_fill_buffer;

	int CTBNDL_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via CTBNDLrestart()), so that the user can continue scanning by
	 * just pointing CTBNDLin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t CTBNDL_buffer_stack_top = 0; /**< index of top of stack. */
static size_t CTBNDL_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * CTBNDL_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (CTBNDL_buffer_stack) \
                          ? (CTBNDL_buffer_stack)[(CTBNDL_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (CTBNDL_buffer_stack)[(CTBNDL_buffer_stack_top)]

/* CTBNDL_hold_char holds the character lost when CTBNDLtext is formed. */
static char CTBNDL_hold_char;
static int CTBNDL_n_chars;		/* number of characters read into CTBNDL_ch_buf */
int CTBNDLleng;

/* Points to current character in buffer. */
static char *CTBNDL_c_buf_p = NULL;
static int CTBNDL_init = 0;		/* whether we need to initialize */
static int CTBNDL_start = 0;	/* start state number */

/* Flag which is used to allow CTBNDLwrap()'s to do buffer switches
 * instead of setting up a fresh CTBNDLin.  A bit of a hack ...
 */
static int CTBNDL_did_buffer_switch_on_eof;

void CTBNDLrestart ( FILE *input_file  );
void CTBNDL_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE CTBNDL_create_buffer ( FILE *file, int size  );
void CTBNDL_delete_buffer ( YY_BUFFER_STATE b  );
void CTBNDL_flush_buffer ( YY_BUFFER_STATE b  );
void CTBNDLpush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void CTBNDLpop_buffer_state ( void );

static void CTBNDLensure_buffer_stack ( void );
static void CTBNDL_load_buffer_state ( void );
static void CTBNDL_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER CTBNDL_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE CTBNDL_scan_buffer ( char *base, CTBNDL_size_t size  );
YY_BUFFER_STATE CTBNDL_scan_string ( const char *CTBNDL_str  );
YY_BUFFER_STATE CTBNDL_scan_bytes ( const char *bytes, int len  );

void *CTBNDLalloc ( CTBNDL_size_t  );
void *CTBNDLrealloc ( void *, CTBNDL_size_t  );
void CTBNDLfree ( void *  );

#define CTBNDL_new_buffer CTBNDL_create_buffer
#define CTBNDL_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        CTBNDLensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            CTBNDL_create_buffer( CTBNDLin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->CTBNDL_is_interactive = is_interactive; \
	}
#define CTBNDL_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        CTBNDLensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            CTBNDL_create_buffer( CTBNDLin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->CTBNDL_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->CTBNDL_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *CTBNDLin = NULL, *CTBNDLout = NULL;

typedef int CTBNDL_state_type;

extern int CTBNDLlineno;
int CTBNDLlineno = 1;

extern char *CTBNDLtext;
#ifdef CTBNDLtext_ptr
#undef CTBNDLtext_ptr
#endif
#define CTBNDLtext_ptr CTBNDLtext

static CTBNDL_state_type CTBNDL_get_previous_state ( void );
static CTBNDL_state_type CTBNDL_try_NUL_trans ( CTBNDL_state_type current_state  );
static int CTBNDL_get_next_buffer ( void );
static void CTBNDLnoreturn CTBNDL_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up CTBNDLtext.
 */
#define YY_DO_BEFORE_ACTION \
	(CTBNDLtext_ptr) = CTBNDL_bp; \
	CTBNDLleng = (int) (CTBNDL_cp - CTBNDL_bp); \
	(CTBNDL_hold_char) = *CTBNDL_cp; \
	*CTBNDL_cp = '\0'; \
	(CTBNDL_c_buf_p) = CTBNDL_cp;
#define YY_NUM_RULES 19
#define YY_END_OF_BUFFER 20
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct CTBNDL_trans_info
	{
	flex_int32_t CTBNDL_verify;
	flex_int32_t CTBNDL_nxt;
	};
static const flex_int16_t CTBNDL_accept[43] =
    {   0,
        0,    0,   20,   18,    1,    2,   14,    7,   18,   12,
       18,   18,   15,   18,   18,   18,    5,   13,    1,    9,
        6,   12,   16,    3,    4,   16,   15,    0,   10,    8,
       11,    5,   13,    6,    0,    4,   16,    0,   17,    0,
       16,    0
    } ;

static const YY_CHAR CTBNDL_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    6,    1,    7,    1,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    1,    1,   14,
       15,   16,    1,    1,   17,   17,   17,   17,   18,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
        1,    1,    1,    1,   17,    1,   17,   17,   17,   17,

       18,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,    1,   19,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR CTBNDL_meta[20] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    1,    1,    1,    3,    3,    1
    } ;

static const flex_int16_t CTBNDL_base[46] =
    {   0,
        0,    0,   56,   57,   53,   57,   39,   57,    3,   46,
       39,   14,   16,   36,   35,   34,    0,   29,   44,   57,
        0,   57,   10,   57,    0,   12,    0,   26,   57,   57,
       57,    0,   57,    0,   31,    0,   19,   30,   29,   25,
       20,   57,   28,   21,   44
    } ;

static const flex_int16_t CTBNDL_def[46] =
    {   0,
       42,    1,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   43,   42,   42,   42,
       44,   42,   42,   42,   45,   42,   13,   42,   42,   42,
       42,   43,   42,   44,   42,   45,   42,   42,   42,   42,
       42,    0,   42,   42,   42
    } ;

static const flex_int16_t CTBNDL_nxt[77] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,    4,    4,    4,
       11,   12,   13,   14,   15,   16,   17,   17,   18,   21,
       21,   24,   23,   34,   37,   25,   26,   35,   27,   35,
       32,   37,   41,   28,   38,   38,   35,   41,   39,   40,
       40,   39,   39,   41,   36,   19,   36,   33,   31,   30,
       29,   23,   22,   20,   19,   42,    3,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42
    } ;

static const flex_int16_t CTBNDL_chk[77] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    9,
        9,   12,   23,   44,   26,   12,   13,   23,   13,   26,
       43,   37,   41,   13,   28,   28,   37,   40,   28,   35,
       35,   39,   38,   35,   45,   19,   45,   18,   16,   15,
       14,   11,   10,    7,    5,    3,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42
    } ;

static CTBNDL_state_type CTBNDL_last_accepting_state;
static char *CTBNDL_last_accepting_cpos;

extern int CTBNDL_flex_debug;
int CTBNDL_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define CTBNDLmore() CTBNDLmore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *CTBNDLtext;
#line 1 "BooleanGrammar.l"
#line 3 "BooleanGrammar.l"
/*
#############################################################################
#                                                                           #
# BSD 3-Clause License (see https://opensource.org/licenses/BSD-3-Clause)   #
#                                                                           #
# Copyright (c) 2011-2020 Institut Curie, 26 rue d'Ulm, Paris, France       #
# All rights reserved.                                                      #
#                                                                           #
# Redistribution and use in source and binary forms, with or without        #
# modification, are permitted provided that the following conditions are    #
# met:                                                                      #
#                                                                           #
# 1. Redistributions of source code must retain the above copyright notice, #
# this list of conditions and the following disclaimer.                     #
#                                                                           #
# 2. Redistributions in binary form must reproduce the above copyright      #
# notice, this list of conditions and the following disclaimer in the       #
# documentation and/or other materials provided with the distribution.      #
#                                                                           #
# 3. Neither the name of the copyright holder nor the names of its          #
# contributors may be used to endorse or promote products derived from this #
# software without specific prior written permission.                       #
#                                                                           #
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS       #
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED #
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A           #
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER #
# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  #
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,       #
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR        #
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF    #
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING      #
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS        #
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.              #
#                                                                           #
#############################################################################

   Module:
     BooleanGrammar.l

   Authors:
     Eric Viara <viara@sysra.com>
     Gautier Stoll <gautier.stoll@curie.fr>
     Vincent Noël <vincent.noel@curie.fr>
 
   Date:
     January-March 2011
*/

#include <math.h>
#include "Utils.h"

static char *CTBNDLtokstr();
static unsigned int input_lineno = 1;
static void skip_comment(void);
#line 524 "<stdout>"
#line 525 "<stdout>"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int CTBNDL_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int CTBNDLlex_destroy ( void );

int CTBNDLget_debug ( void );

void CTBNDLset_debug ( int debug_flag  );

YY_EXTRA_TYPE CTBNDLget_extra ( void );

void CTBNDLset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *CTBNDLget_in ( void );

void CTBNDLset_in  ( FILE * _in_str  );

FILE *CTBNDLget_out ( void );

void CTBNDLset_out  ( FILE * _out_str  );

			int CTBNDLget_leng ( void );

char *CTBNDLget_text ( void );

int CTBNDLget_lineno ( void );

void CTBNDLset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int CTBNDLwrap ( void );
#else
extern int CTBNDLwrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void CTBNDLunput ( int c, char *buf_ptr  );
    
#endif

#ifndef CTBNDLtext_ptr
static void CTBNDL_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int CTBNDL_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int CTBNDLinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( CTBNDLtext, (size_t) CTBNDLleng, 1, CTBNDLout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->CTBNDL_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( CTBNDLin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( CTBNDLin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (CTBNDL_size_t) max_size, CTBNDLin)) == 0 && ferror(CTBNDLin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(CTBNDLin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "CTBNDLterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef CTBNDLterminate
#define CTBNDLterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) CTBNDL_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int CTBNDLlex (void);

#define YY_DECL int CTBNDLlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after CTBNDLtext and CTBNDLleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	CTBNDL_state_type CTBNDL_current_state;
	char *CTBNDL_cp, *CTBNDL_bp;
	int CTBNDL_act;
    
	if ( !(CTBNDL_init) )
		{
		(CTBNDL_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (CTBNDL_start) )
			(CTBNDL_start) = 1;	/* first start state */

		if ( ! CTBNDLin )
			CTBNDLin = stdin;

		if ( ! CTBNDLout )
			CTBNDLout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			CTBNDLensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				CTBNDL_create_buffer( CTBNDLin, YY_BUF_SIZE );
		}

		CTBNDL_load_buffer_state(  );
		}

	{
#line 63 "BooleanGrammar.l"


#line 745 "<stdout>"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		CTBNDL_cp = (CTBNDL_c_buf_p);

		/* Support of CTBNDLtext. */
		*CTBNDL_cp = (CTBNDL_hold_char);

		/* CTBNDL_bp points to the position in CTBNDL_ch_buf of the start of
		 * the current run.
		 */
		CTBNDL_bp = CTBNDL_cp;

		CTBNDL_current_state = (CTBNDL_start);
CTBNDL_match:
		do
			{
			YY_CHAR CTBNDL_c = CTBNDL_ec[YY_SC_TO_UI(*CTBNDL_cp)] ;
			if ( CTBNDL_accept[CTBNDL_current_state] )
				{
				(CTBNDL_last_accepting_state) = CTBNDL_current_state;
				(CTBNDL_last_accepting_cpos) = CTBNDL_cp;
				}
			while ( CTBNDL_chk[CTBNDL_base[CTBNDL_current_state] + CTBNDL_c] != CTBNDL_current_state )
				{
				CTBNDL_current_state = (int) CTBNDL_def[CTBNDL_current_state];
				if ( CTBNDL_current_state >= 43 )
					CTBNDL_c = CTBNDL_meta[CTBNDL_c];
				}
			CTBNDL_current_state = CTBNDL_nxt[CTBNDL_base[CTBNDL_current_state] + CTBNDL_c];
			++CTBNDL_cp;
			}
		while ( CTBNDL_base[CTBNDL_current_state] != 57 );

CTBNDL_find_action:
		CTBNDL_act = CTBNDL_accept[CTBNDL_current_state];
		if ( CTBNDL_act == 0 )
			{ /* have to back up */
			CTBNDL_cp = (CTBNDL_last_accepting_cpos);
			CTBNDL_current_state = (CTBNDL_last_accepting_state);
			CTBNDL_act = CTBNDL_accept[CTBNDL_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( CTBNDL_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*CTBNDL_cp = (CTBNDL_hold_char);
			CTBNDL_cp = (CTBNDL_last_accepting_cpos);
			CTBNDL_current_state = (CTBNDL_last_accepting_state);
			goto CTBNDL_find_action;

case 1:
YY_RULE_SETUP
#line 65 "BooleanGrammar.l"
{ }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 66 "BooleanGrammar.l"
{ input_lineno++; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 67 "BooleanGrammar.l"
{ skip_comment(); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 68 "BooleanGrammar.l"
{ }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 69 "BooleanGrammar.l"
{
  if (!strcasecmp(CTBNDLtext, "NOT")) {
     return LOGNOT;
  }
  if (!strcasecmp(CTBNDLtext, "AND")) {
     return LOGAND;
  }
  if (!strcasecmp(CTBNDLtext, "OR")) {
     return LOGOR;
  }
  if (!strcasecmp(CTBNDLtext, "XOR")) {
     return LOGXOR;
  }
  if (!strcasecmp(CTBNDLtext, "NODE")) {
     return NODE;
  }
  CTBNDLlval.str = maboss_strdup(CTBNDLtext);
  return IDENTIFIER;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 88 "BooleanGrammar.l"
{
  CTBNDLlval.str = maboss_strdup(CTBNDLtext);
  return VARIABLE;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 92 "BooleanGrammar.l"
{
  CTBNDLlval.str = CTBNDLtokstr();
  return STRING;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 96 "BooleanGrammar.l"
{ return EQUAL; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 97 "BooleanGrammar.l"
{ return NOT_EQUAL; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 98 "BooleanGrammar.l"
{ return LTEQ; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 99 "BooleanGrammar.l"
{ return GTEQ; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 100 "BooleanGrammar.l"
{ return LOGAND; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 101 "BooleanGrammar.l"
{ return LOGOR; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 102 "BooleanGrammar.l"
{ return LOGNOT; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 103 "BooleanGrammar.l"
{ sscanf(CTBNDLtext, "%lld", &CTBNDLlval.l); return INTEGER; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 104 "BooleanGrammar.l"
{ CTBNDLlval.d = atof(CTBNDLtext); return DOUBLE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 105 "BooleanGrammar.l"
{ CTBNDLlval.d = atof(CTBNDLtext); return DOUBLE; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 106 "BooleanGrammar.l"
{ return CTBNDLtext[0]; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 108 "BooleanGrammar.l"
ECHO;
	YY_BREAK
#line 922 "<stdout>"
case YY_STATE_EOF(INITIAL):
	CTBNDLterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int CTBNDL_amount_of_matched_text = (int) (CTBNDL_cp - (CTBNDLtext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*CTBNDL_cp = (CTBNDL_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->CTBNDL_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed CTBNDLin at a new source and called
			 * CTBNDLlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(CTBNDL_n_chars) = YY_CURRENT_BUFFER_LVALUE->CTBNDL_n_chars;
			YY_CURRENT_BUFFER_LVALUE->CTBNDL_input_file = CTBNDLin;
			YY_CURRENT_BUFFER_LVALUE->CTBNDL_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for CTBNDL_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since CTBNDL_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (CTBNDL_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->CTBNDL_ch_buf[(CTBNDL_n_chars)] )
			{ /* This was really a NUL. */
			CTBNDL_state_type CTBNDL_next_state;

			(CTBNDL_c_buf_p) = (CTBNDLtext_ptr) + CTBNDL_amount_of_matched_text;

			CTBNDL_current_state = CTBNDL_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * CTBNDL_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			CTBNDL_next_state = CTBNDL_try_NUL_trans( CTBNDL_current_state );

			CTBNDL_bp = (CTBNDLtext_ptr) + YY_MORE_ADJ;

			if ( CTBNDL_next_state )
				{
				/* Consume the NUL. */
				CTBNDL_cp = ++(CTBNDL_c_buf_p);
				CTBNDL_current_state = CTBNDL_next_state;
				goto CTBNDL_match;
				}

			else
				{
				CTBNDL_cp = (CTBNDL_c_buf_p);
				goto CTBNDL_find_action;
				}
			}

		else switch ( CTBNDL_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(CTBNDL_did_buffer_switch_on_eof) = 0;

				if ( CTBNDLwrap(  ) )
					{
					/* Note: because we've taken care in
					 * CTBNDL_get_next_buffer() to have set up
					 * CTBNDLtext, we can now set up
					 * CTBNDL_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(CTBNDL_c_buf_p) = (CTBNDLtext_ptr) + YY_MORE_ADJ;

					CTBNDL_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (CTBNDL_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(CTBNDL_c_buf_p) =
					(CTBNDLtext_ptr) + CTBNDL_amount_of_matched_text;

				CTBNDL_current_state = CTBNDL_get_previous_state(  );

				CTBNDL_cp = (CTBNDL_c_buf_p);
				CTBNDL_bp = (CTBNDLtext_ptr) + YY_MORE_ADJ;
				goto CTBNDL_match;

			case EOB_ACT_LAST_MATCH:
				(CTBNDL_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->CTBNDL_ch_buf[(CTBNDL_n_chars)];

				CTBNDL_current_state = CTBNDL_get_previous_state(  );

				CTBNDL_cp = (CTBNDL_c_buf_p);
				CTBNDL_bp = (CTBNDLtext_ptr) + YY_MORE_ADJ;
				goto CTBNDL_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of CTBNDLlex */

/* CTBNDL_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int CTBNDL_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->CTBNDL_ch_buf;
	char *source = (CTBNDLtext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (CTBNDL_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->CTBNDL_ch_buf[(CTBNDL_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->CTBNDL_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (CTBNDL_c_buf_p) - (CTBNDLtext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((CTBNDL_c_buf_p) - (CTBNDLtext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->CTBNDL_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->CTBNDL_n_chars = (CTBNDL_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->CTBNDL_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int CTBNDL_c_buf_p_offset =
				(int) ((CTBNDL_c_buf_p) - b->CTBNDL_ch_buf);

			if ( b->CTBNDL_is_our_buffer )
				{
				int new_size = b->CTBNDL_buf_size * 2;

				if ( new_size <= 0 )
					b->CTBNDL_buf_size += b->CTBNDL_buf_size / 8;
				else
					b->CTBNDL_buf_size *= 2;

				b->CTBNDL_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					CTBNDLrealloc( (void *) b->CTBNDL_ch_buf,
							 (CTBNDL_size_t) (b->CTBNDL_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->CTBNDL_ch_buf = NULL;

			if ( ! b->CTBNDL_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(CTBNDL_c_buf_p) = &b->CTBNDL_ch_buf[CTBNDL_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->CTBNDL_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->CTBNDL_ch_buf[number_to_move]),
			(CTBNDL_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->CTBNDL_n_chars = (CTBNDL_n_chars);
		}

	if ( (CTBNDL_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			CTBNDLrestart( CTBNDLin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->CTBNDL_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((CTBNDL_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->CTBNDL_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (CTBNDL_n_chars) + number_to_move + ((CTBNDL_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->CTBNDL_ch_buf = (char *) CTBNDLrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->CTBNDL_ch_buf, (CTBNDL_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->CTBNDL_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in CTBNDL_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->CTBNDL_buf_size = (int) (new_size - 2);
	}

	(CTBNDL_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->CTBNDL_ch_buf[(CTBNDL_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->CTBNDL_ch_buf[(CTBNDL_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(CTBNDLtext_ptr) = &YY_CURRENT_BUFFER_LVALUE->CTBNDL_ch_buf[0];

	return ret_val;
}

/* CTBNDL_get_previous_state - get the state just before the EOB char was reached */

    static CTBNDL_state_type CTBNDL_get_previous_state (void)
{
	CTBNDL_state_type CTBNDL_current_state;
	char *CTBNDL_cp;
    
	CTBNDL_current_state = (CTBNDL_start);

	for ( CTBNDL_cp = (CTBNDLtext_ptr) + YY_MORE_ADJ; CTBNDL_cp < (CTBNDL_c_buf_p); ++CTBNDL_cp )
		{
		YY_CHAR CTBNDL_c = (*CTBNDL_cp ? CTBNDL_ec[YY_SC_TO_UI(*CTBNDL_cp)] : 1);
		if ( CTBNDL_accept[CTBNDL_current_state] )
			{
			(CTBNDL_last_accepting_state) = CTBNDL_current_state;
			(CTBNDL_last_accepting_cpos) = CTBNDL_cp;
			}
		while ( CTBNDL_chk[CTBNDL_base[CTBNDL_current_state] + CTBNDL_c] != CTBNDL_current_state )
			{
			CTBNDL_current_state = (int) CTBNDL_def[CTBNDL_current_state];
			if ( CTBNDL_current_state >= 43 )
				CTBNDL_c = CTBNDL_meta[CTBNDL_c];
			}
		CTBNDL_current_state = CTBNDL_nxt[CTBNDL_base[CTBNDL_current_state] + CTBNDL_c];
		}

	return CTBNDL_current_state;
}

/* CTBNDL_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = CTBNDL_try_NUL_trans( current_state );
 */
    static CTBNDL_state_type CTBNDL_try_NUL_trans  (CTBNDL_state_type CTBNDL_current_state )
{
	int CTBNDL_is_jam;
    	char *CTBNDL_cp = (CTBNDL_c_buf_p);

	YY_CHAR CTBNDL_c = 1;
	if ( CTBNDL_accept[CTBNDL_current_state] )
		{
		(CTBNDL_last_accepting_state) = CTBNDL_current_state;
		(CTBNDL_last_accepting_cpos) = CTBNDL_cp;
		}
	while ( CTBNDL_chk[CTBNDL_base[CTBNDL_current_state] + CTBNDL_c] != CTBNDL_current_state )
		{
		CTBNDL_current_state = (int) CTBNDL_def[CTBNDL_current_state];
		if ( CTBNDL_current_state >= 43 )
			CTBNDL_c = CTBNDL_meta[CTBNDL_c];
		}
	CTBNDL_current_state = CTBNDL_nxt[CTBNDL_base[CTBNDL_current_state] + CTBNDL_c];
	CTBNDL_is_jam = (CTBNDL_current_state == 42);

		return CTBNDL_is_jam ? 0 : CTBNDL_current_state;
}

#ifndef YY_NO_UNPUT

    static void CTBNDLunput (int c, char * CTBNDL_bp )
{
	char *CTBNDL_cp;
    
    CTBNDL_cp = (CTBNDL_c_buf_p);

	/* undo effects of setting up CTBNDLtext */
	*CTBNDL_cp = (CTBNDL_hold_char);

	if ( CTBNDL_cp < YY_CURRENT_BUFFER_LVALUE->CTBNDL_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (CTBNDL_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->CTBNDL_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->CTBNDL_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->CTBNDL_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->CTBNDL_ch_buf )
			*--dest = *--source;

		CTBNDL_cp += (int) (dest - source);
		CTBNDL_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->CTBNDL_n_chars =
			(CTBNDL_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->CTBNDL_buf_size;

		if ( CTBNDL_cp < YY_CURRENT_BUFFER_LVALUE->CTBNDL_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--CTBNDL_cp = (char) c;

	(CTBNDLtext_ptr) = CTBNDL_bp;
	(CTBNDL_hold_char) = *CTBNDL_cp;
	(CTBNDL_c_buf_p) = CTBNDL_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int CTBNDLinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(CTBNDL_c_buf_p) = (CTBNDL_hold_char);

	if ( *(CTBNDL_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* CTBNDL_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (CTBNDL_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->CTBNDL_ch_buf[(CTBNDL_n_chars)] )
			/* This was really a NUL. */
			*(CTBNDL_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((CTBNDL_c_buf_p) - (CTBNDLtext_ptr));
			++(CTBNDL_c_buf_p);

			switch ( CTBNDL_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because CTBNDL_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					CTBNDLrestart( CTBNDLin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( CTBNDLwrap(  ) )
						return 0;

					if ( ! (CTBNDL_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return CTBNDLinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(CTBNDL_c_buf_p) = (CTBNDLtext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (CTBNDL_c_buf_p);	/* cast for 8-bit char's */
	*(CTBNDL_c_buf_p) = '\0';	/* preserve CTBNDLtext */
	(CTBNDL_hold_char) = *++(CTBNDL_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void CTBNDLrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        CTBNDLensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            CTBNDL_create_buffer( CTBNDLin, YY_BUF_SIZE );
	}

	CTBNDL_init_buffer( YY_CURRENT_BUFFER, input_file );
	CTBNDL_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void CTBNDL_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		CTBNDLpop_buffer_state();
	 *		CTBNDLpush_buffer_state(new_buffer);
     */
	CTBNDLensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(CTBNDL_c_buf_p) = (CTBNDL_hold_char);
		YY_CURRENT_BUFFER_LVALUE->CTBNDL_buf_pos = (CTBNDL_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->CTBNDL_n_chars = (CTBNDL_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	CTBNDL_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (CTBNDLwrap()) processing, but the only time this flag
	 * is looked at is after CTBNDLwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(CTBNDL_did_buffer_switch_on_eof) = 1;
}

static void CTBNDL_load_buffer_state  (void)
{
    	(CTBNDL_n_chars) = YY_CURRENT_BUFFER_LVALUE->CTBNDL_n_chars;
	(CTBNDLtext_ptr) = (CTBNDL_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->CTBNDL_buf_pos;
	CTBNDLin = YY_CURRENT_BUFFER_LVALUE->CTBNDL_input_file;
	(CTBNDL_hold_char) = *(CTBNDL_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE CTBNDL_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) CTBNDLalloc( sizeof( struct CTBNDL_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in CTBNDL_create_buffer()" );

	b->CTBNDL_buf_size = size;

	/* CTBNDL_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->CTBNDL_ch_buf = (char *) CTBNDLalloc( (CTBNDL_size_t) (b->CTBNDL_buf_size + 2)  );
	if ( ! b->CTBNDL_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in CTBNDL_create_buffer()" );

	b->CTBNDL_is_our_buffer = 1;

	CTBNDL_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with CTBNDL_create_buffer()
 * 
 */
    void CTBNDL_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->CTBNDL_is_our_buffer )
		CTBNDLfree( (void *) b->CTBNDL_ch_buf  );

	CTBNDLfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a CTBNDLrestart() or at EOF.
 */
    static void CTBNDL_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	CTBNDL_flush_buffer( b );

	b->CTBNDL_input_file = file;
	b->CTBNDL_fill_buffer = 1;

    /* If b is the current buffer, then CTBNDL_init_buffer was _probably_
     * called from CTBNDLrestart() or through CTBNDL_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->CTBNDL_bs_lineno = 1;
        b->CTBNDL_bs_column = 0;
    }

        b->CTBNDL_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void CTBNDL_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->CTBNDL_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->CTBNDL_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->CTBNDL_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->CTBNDL_buf_pos = &b->CTBNDL_ch_buf[0];

	b->CTBNDL_at_bol = 1;
	b->CTBNDL_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		CTBNDL_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void CTBNDLpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	CTBNDLensure_buffer_stack();

	/* This block is copied from CTBNDL_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(CTBNDL_c_buf_p) = (CTBNDL_hold_char);
		YY_CURRENT_BUFFER_LVALUE->CTBNDL_buf_pos = (CTBNDL_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->CTBNDL_n_chars = (CTBNDL_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(CTBNDL_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from CTBNDL_switch_to_buffer. */
	CTBNDL_load_buffer_state(  );
	(CTBNDL_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void CTBNDLpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	CTBNDL_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((CTBNDL_buffer_stack_top) > 0)
		--(CTBNDL_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		CTBNDL_load_buffer_state(  );
		(CTBNDL_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void CTBNDLensure_buffer_stack (void)
{
	CTBNDL_size_t num_to_alloc;
    
	if (!(CTBNDL_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(CTBNDL_buffer_stack) = (struct CTBNDL_buffer_state**)CTBNDLalloc
								(num_to_alloc * sizeof(struct CTBNDL_buffer_state*)
								);
		if ( ! (CTBNDL_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in CTBNDLensure_buffer_stack()" );

		memset((CTBNDL_buffer_stack), 0, num_to_alloc * sizeof(struct CTBNDL_buffer_state*));

		(CTBNDL_buffer_stack_max) = num_to_alloc;
		(CTBNDL_buffer_stack_top) = 0;
		return;
	}

	if ((CTBNDL_buffer_stack_top) >= ((CTBNDL_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		CTBNDL_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (CTBNDL_buffer_stack_max) + grow_size;
		(CTBNDL_buffer_stack) = (struct CTBNDL_buffer_state**)CTBNDLrealloc
								((CTBNDL_buffer_stack),
								num_to_alloc * sizeof(struct CTBNDL_buffer_state*)
								);
		if ( ! (CTBNDL_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in CTBNDLensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((CTBNDL_buffer_stack) + (CTBNDL_buffer_stack_max), 0, grow_size * sizeof(struct CTBNDL_buffer_state*));
		(CTBNDL_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE CTBNDL_scan_buffer  (char * base, CTBNDL_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) CTBNDLalloc( sizeof( struct CTBNDL_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in CTBNDL_scan_buffer()" );

	b->CTBNDL_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->CTBNDL_buf_pos = b->CTBNDL_ch_buf = base;
	b->CTBNDL_is_our_buffer = 0;
	b->CTBNDL_input_file = NULL;
	b->CTBNDL_n_chars = b->CTBNDL_buf_size;
	b->CTBNDL_is_interactive = 0;
	b->CTBNDL_at_bol = 1;
	b->CTBNDL_fill_buffer = 0;
	b->CTBNDL_buffer_status = YY_BUFFER_NEW;

	CTBNDL_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to CTBNDLlex() will
 * scan from a @e copy of @a str.
 * @param CTBNDLstr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       CTBNDL_scan_bytes() instead.
 */
YY_BUFFER_STATE CTBNDL_scan_string (const char * CTBNDLstr )
{
    
	return CTBNDL_scan_bytes( CTBNDLstr, (int) strlen(CTBNDLstr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to CTBNDLlex() will
 * scan from a @e copy of @a bytes.
 * @param CTBNDLbytes the byte buffer to scan
 * @param _CTBNDLbytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE CTBNDL_scan_bytes  (const char * CTBNDLbytes, int  _CTBNDLbytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	CTBNDL_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (CTBNDL_size_t) (_CTBNDLbytes_len + 2);
	buf = (char *) CTBNDLalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in CTBNDL_scan_bytes()" );

	for ( i = 0; i < _CTBNDLbytes_len; ++i )
		buf[i] = CTBNDLbytes[i];

	buf[_CTBNDLbytes_len] = buf[_CTBNDLbytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = CTBNDL_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in CTBNDL_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->CTBNDL_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void CTBNDLnoreturn CTBNDL_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine CTBNDLless() so it works in section 3 code. */

#undef CTBNDLless
#define CTBNDLless(n) \
	do \
		{ \
		/* Undo effects of setting up CTBNDLtext. */ \
        int CTBNDLless_macro_arg = (n); \
        YY_LESS_LINENO(CTBNDLless_macro_arg);\
		CTBNDLtext[CTBNDLleng] = (CTBNDL_hold_char); \
		(CTBNDL_c_buf_p) = CTBNDLtext + CTBNDLless_macro_arg; \
		(CTBNDL_hold_char) = *(CTBNDL_c_buf_p); \
		*(CTBNDL_c_buf_p) = '\0'; \
		CTBNDLleng = CTBNDLless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int CTBNDLget_lineno  (void)
{
    
    return CTBNDLlineno;
}

/** Get the input stream.
 * 
 */
FILE *CTBNDLget_in  (void)
{
        return CTBNDLin;
}

/** Get the output stream.
 * 
 */
FILE *CTBNDLget_out  (void)
{
        return CTBNDLout;
}

/** Get the length of the current token.
 * 
 */
int CTBNDLget_leng  (void)
{
        return CTBNDLleng;
}

/** Get the current token.
 * 
 */

char *CTBNDLget_text  (void)
{
        return CTBNDLtext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void CTBNDLset_lineno (int  _line_number )
{
    
    CTBNDLlineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see CTBNDL_switch_to_buffer
 */
void CTBNDLset_in (FILE *  _in_str )
{
        CTBNDLin = _in_str ;
}

void CTBNDLset_out (FILE *  _out_str )
{
        CTBNDLout = _out_str ;
}

int CTBNDLget_debug  (void)
{
        return CTBNDL_flex_debug;
}

void CTBNDLset_debug (int  _bdebug )
{
        CTBNDL_flex_debug = _bdebug ;
}

static int CTBNDL_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from CTBNDLlex_destroy(), so don't allocate here.
     */

    (CTBNDL_buffer_stack) = NULL;
    (CTBNDL_buffer_stack_top) = 0;
    (CTBNDL_buffer_stack_max) = 0;
    (CTBNDL_c_buf_p) = NULL;
    (CTBNDL_init) = 0;
    (CTBNDL_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    CTBNDLin = stdin;
    CTBNDLout = stdout;
#else
    CTBNDLin = NULL;
    CTBNDLout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * CTBNDLlex_init()
     */
    return 0;
}

/* CTBNDLlex_destroy is for both reentrant and non-reentrant scanners. */
int CTBNDLlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		CTBNDL_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		CTBNDLpop_buffer_state();
	}

	/* Destroy the stack itself. */
	CTBNDLfree((CTBNDL_buffer_stack) );
	(CTBNDL_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * CTBNDLlex() is called, initialization will occur. */
    CTBNDL_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef CTBNDLtext_ptr
static void CTBNDL_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int CTBNDL_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *CTBNDLalloc (CTBNDL_size_t  size )
{
			return malloc(size);
}

void *CTBNDLrealloc  (void * ptr, CTBNDL_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void CTBNDLfree (void * ptr )
{
			free( (char *) ptr );	/* see CTBNDLrealloc() for (char *) cast */
}

#define YYTABLES_NAME "CTBNDLtables"

#line 108 "BooleanGrammar.l"


#define _ESC_(X, Y) case X: *p++ = Y; break

static void CTBNDLpurgestring(unsigned char *s)
{
  unsigned char c;
  unsigned char *p = s;
  while ((c = *s) != 0) {
    if (c == '\\') {
       c = *++s;
       switch(c) {
         _ESC_('a', '\a');
	 _ESC_('b', '\b');
	 _ESC_('f', '\f');
	 _ESC_('n', '\n');
	 _ESC_('r', '\r');
	 _ESC_('t', '\t');
	 _ESC_('v', '\v');
	 _ESC_('\'', '\'');
	 _ESC_('\"', '"');
	 _ESC_('\\', '\\');

	 default:
	   *p++ = '\\';
	   *p++ = c;
        }
       s++;
      }
      else
        *p++ = *s++;
    }

  *p = 0;
}

static char *CTBNDLtokstr()
{
   int s_size;
   unsigned char *s, c;
   s_size = 32;
   s = (unsigned char *)malloc(s_size);

   int n, backslash;
   for (n = 0, backslash = 0; (c = CTBNDLinput()) != 0 && c != 255; n++) {
       if (c == '\n') {
         input_lineno++;
       }
       else if (c == '\\') {
         backslash = !backslash;
       }
       else if (c == '"' && !backslash) {
	 break;
       }
       else {
         backslash = 0;
       }

       if (n >= s_size) {
           s_size *= 2;
           s = (unsigned char *)realloc(s, s_size);
       }

       s[n] = c;
     }

   if (n >= s_size) {
       s_size += 4;
       s = (unsigned char *)realloc(s, s_size);
   }
   
   s[n] = 0;
   CTBNDLpurgestring(s);
   return (char *)s;
}

static void skip_comment(void)
{
  int c1, c2;

  c1 = CTBNDLinput();
  c2 = CTBNDLinput();

  while (c2 != EOF && !(c1 == '*' && c2 == '/')) {
    if (c1 == '\n') {
      ++input_lineno;
    }
    c1 = c2;
    c2 = CTBNDLinput();
  }
}

int CTBNDLwrap(void)
{
  return 1;
}

static void CTBNDLerror(const char *)
{
  char tok[32];
  sprintf(tok, "%u", input_lineno);
  throw BNException("BND syntax error at line #" + std::string(tok));
}

void CTBNDL_scan_expression(const char* str)
{
    CTBNDL_switch_to_buffer(CTBNDL_scan_string(str));
}

// to avoid compiler warning when using -Wall option
void boolean_grammar_to_make_compiler_happy()
{
  unput('x');
}

